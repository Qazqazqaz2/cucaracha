from aiogram.types import Message
from aiogram.filters import Command
from bot.dispatcher import dp
from utils.helpers import is_admin
from database.engine import engine
from sqlmodel import Session, select
from models.gift_type import GiftType
from models.account import Account
from models.purchase import Purchase

@dp.message(Command("admin"))
async def admin_panel(message: Message):
    if not is_admin(message.from_user.id):
        return
    with Session(engine) as s:
        gifts = s.exec(select(GiftType)).all()
        print(gifts)
        accounts = s.exec(select(Account)).all()
        pending = s.exec(select(Purchase).where(Purchase.status == "purchased")).all()
    gifts_sorted = sorted(gifts, key=lambda g: (g.remaining_global, -g.price_stars))
    lines = ["üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:"]
    if gifts_sorted:
        lines.append("\n–û—Å—Ç–∞—Ç–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç):")
        for g in gifts_sorted:
            lines.append(f"‚Ä¢ {g.title} ‚Äî {g.price_stars}‚≠ê | –æ—Å—Ç–∞–ª–æ—Å—å‚âà {g.remaining_global}")
    lines.append("\n–ê–∫–∫–∞—É–Ω—Ç—ã:")
    for a in accounts[:50]:
        status = "BL" if a.blacklisted else "OK"
        lines.append(f"‚Ä¢ {a.session_name} [{status}] –∫–æ—à–µ–ª—ë–∫‚âà{a.stars_wallet}‚≠ê proxy={'yes' if a.proxy else 'no'}")
    lines.append(f"\n–ù–µ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏: {len(pending)}")
    await message.answer("\n".join(lines))